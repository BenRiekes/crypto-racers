/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RacerInterface extends utils.Interface {
  functions: {
    "IDToCar(uint256)": FunctionFragment;
    "IDToRace(uint256)": FunctionFragment;
    "IDToToken(uint256)": FunctionFragment;
    "IsCaller(address)": FunctionFragment;
    "cars(uint256)": FunctionFragment;
    "claimedFree(address)": FunctionFragment;
    "createCar(string,string,string,uint256,uint256,uint8)": FunctionFragment;
    "createRace(string,string,uint256)": FunctionFragment;
    "createToken(address,uint256,uint256[],string)": FunctionFragment;
    "delistToken(uint256)": FunctionFragment;
    "getTokenStats(uint256)": FunctionFragment;
    "listToken(uint256,uint256,uint8)": FunctionFragment;
    "mint(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "purchaseToken(uint256)": FunctionFragment;
    "racerToken()": FunctionFragment;
    "racerUtils()": FunctionFragment;
    "races(uint256)": FunctionFragment;
    "setCallers(address)": FunctionFragment;
    "setContracts(address,address)": FunctionFragment;
    "setRaceAccess(uint256,bool)": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "updateRace(uint256,address,address,uint256,uint256)": FunctionFragment;
    "updateTokenFul(uint256,uint256,uint256[])": FunctionFragment;
    "updateTokenReq(uint256,uint256[])": FunctionFragment;
    "withdrawl()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IDToCar"
      | "IDToRace"
      | "IDToToken"
      | "IsCaller"
      | "cars"
      | "claimedFree"
      | "createCar"
      | "createRace"
      | "createToken"
      | "delistToken"
      | "getTokenStats"
      | "listToken"
      | "mint"
      | "owner"
      | "purchaseToken"
      | "racerToken"
      | "racerUtils"
      | "races"
      | "setCallers"
      | "setContracts"
      | "setRaceAccess"
      | "tokens"
      | "updateRace"
      | "updateTokenFul"
      | "updateTokenReq"
      | "withdrawl"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "IDToCar",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "IDToRace",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "IDToToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "IsCaller",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cars",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedFree",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCar",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createRace",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delistToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenStats",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "listToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "racerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "racerUtils",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "races",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCallers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContracts",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRaceAccess",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRace",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenFul",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenReq",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "withdrawl", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IDToCar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IDToRace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IDToToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IsCaller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cars", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedFree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createCar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createRace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "racerToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "racerUtils", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "races", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCallers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRaceAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateRace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenFul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenReq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawl", data: BytesLike): Result;

  events: {
    "CarMinted(uint256,uint256,address,string,uint256[],uint256)": EventFragment;
    "RaceCompleted(uint256,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "StatsUpdated(uint256,uint256[],uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CarMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RaceCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StatsUpdated"): EventFragment;
}

export interface CarMintedEventObject {
  TokenID: BigNumber;
  CarID: BigNumber;
  Owner: string;
  URI: string;
  Stats: BigNumber[];
  Time: BigNumber;
}
export type CarMintedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber[], BigNumber],
  CarMintedEventObject
>;

export type CarMintedEventFilter = TypedEventFilter<CarMintedEvent>;

export interface RaceCompletedEventObject {
  RaceID: BigNumber;
  Winner: string;
  Loser: string;
  WinnerToken: BigNumber;
  LoserToken: BigNumber;
  Prize: BigNumber;
  Time: BigNumber;
}
export type RaceCompletedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  RaceCompletedEventObject
>;

export type RaceCompletedEventFilter = TypedEventFilter<RaceCompletedEvent>;

export interface StatsUpdatedEventObject {
  TokenID: BigNumber;
  NewStats: BigNumber[];
  AmountPayed: BigNumber;
  Updater: string;
  Time: BigNumber;
}
export type StatsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber, string, BigNumber],
  StatsUpdatedEventObject
>;

export type StatsUpdatedEventFilter = TypedEventFilter<StatsUpdatedEvent>;

export interface Racer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RacerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IDToCar(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        number
      ] & {
        carID: BigNumber;
        name: string;
        desc: string;
        uri: string;
        supply: BigNumber;
        price: BigNumber;
        onMarket: boolean;
        paymentMethod: number;
      }
    >;

    IDToRace(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        raceID: BigNumber;
        name: string;
        desc: string;
        entryFee: BigNumber;
        prize: BigNumber;
        plays: BigNumber;
        active: boolean;
      }
    >;

    IDToToken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number
      ] & {
        owner: string;
        tokenID: BigNumber;
        carID: BigNumber;
        uri: string;
        wins: BigNumber;
        losses: BigNumber;
        price: BigNumber;
        onMarket: boolean;
        paymentMethod: number;
      }
    >;

    IsCaller(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cars(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        number
      ] & {
        carID: BigNumber;
        name: string;
        desc: string;
        uri: string;
        supply: BigNumber;
        price: BigNumber;
        onMarket: boolean;
        paymentMethod: number;
      }
    >;

    claimedFree(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createCar(
      _uri: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _supply: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _paymentMethod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRace(
      _name: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _entryFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createToken(
      _minter: PromiseOrValue<string>,
      _carID: PromiseOrValue<BigNumberish>,
      _tokenIDs: PromiseOrValue<BigNumberish>[],
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delistToken(
      _tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTokenStats(
      _tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    listToken(
      _tokenID: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _paymentMethod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      _carID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchaseToken(
      _tokenID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    racerToken(overrides?: CallOverrides): Promise<[string]>;

    racerUtils(overrides?: CallOverrides): Promise<[string]>;

    races(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        raceID: BigNumber;
        name: string;
        desc: string;
        entryFee: BigNumber;
        prize: BigNumber;
        plays: BigNumber;
        active: boolean;
      }
    >;

    setCallers(
      _newCaller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContracts(
      _racerToken: PromiseOrValue<string>,
      _racerUtils: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRaceAccess(
      _raceID: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number
      ] & {
        owner: string;
        tokenID: BigNumber;
        carID: BigNumber;
        uri: string;
        wins: BigNumber;
        losses: BigNumber;
        price: BigNumber;
        onMarket: boolean;
        paymentMethod: number;
      }
    >;

    updateRace(
      _raceID: PromiseOrValue<BigNumberish>,
      _winner: PromiseOrValue<string>,
      _loser: PromiseOrValue<string>,
      _winnerTokenID: PromiseOrValue<BigNumberish>,
      _loserTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTokenFul(
      _tokenID: PromiseOrValue<BigNumberish>,
      _cost: PromiseOrValue<BigNumberish>,
      _newStats: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTokenReq(
      _tokenID: PromiseOrValue<BigNumberish>,
      _newStats: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawl(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  IDToCar(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      boolean,
      number
    ] & {
      carID: BigNumber;
      name: string;
      desc: string;
      uri: string;
      supply: BigNumber;
      price: BigNumber;
      onMarket: boolean;
      paymentMethod: number;
    }
  >;

  IDToRace(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
      raceID: BigNumber;
      name: string;
      desc: string;
      entryFee: BigNumber;
      prize: BigNumber;
      plays: BigNumber;
      active: boolean;
    }
  >;

  IDToToken(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number
    ] & {
      owner: string;
      tokenID: BigNumber;
      carID: BigNumber;
      uri: string;
      wins: BigNumber;
      losses: BigNumber;
      price: BigNumber;
      onMarket: boolean;
      paymentMethod: number;
    }
  >;

  IsCaller(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cars(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      boolean,
      number
    ] & {
      carID: BigNumber;
      name: string;
      desc: string;
      uri: string;
      supply: BigNumber;
      price: BigNumber;
      onMarket: boolean;
      paymentMethod: number;
    }
  >;

  claimedFree(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createCar(
    _uri: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _desc: PromiseOrValue<string>,
    _supply: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _paymentMethod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRace(
    _name: PromiseOrValue<string>,
    _desc: PromiseOrValue<string>,
    _entryFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createToken(
    _minter: PromiseOrValue<string>,
    _carID: PromiseOrValue<BigNumberish>,
    _tokenIDs: PromiseOrValue<BigNumberish>[],
    _uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delistToken(
    _tokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTokenStats(
    _tokenID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  listToken(
    _tokenID: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _paymentMethod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    _carID: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchaseToken(
    _tokenID: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  racerToken(overrides?: CallOverrides): Promise<string>;

  racerUtils(overrides?: CallOverrides): Promise<string>;

  races(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
      raceID: BigNumber;
      name: string;
      desc: string;
      entryFee: BigNumber;
      prize: BigNumber;
      plays: BigNumber;
      active: boolean;
    }
  >;

  setCallers(
    _newCaller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContracts(
    _racerToken: PromiseOrValue<string>,
    _racerUtils: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRaceAccess(
    _raceID: PromiseOrValue<BigNumberish>,
    _active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number
    ] & {
      owner: string;
      tokenID: BigNumber;
      carID: BigNumber;
      uri: string;
      wins: BigNumber;
      losses: BigNumber;
      price: BigNumber;
      onMarket: boolean;
      paymentMethod: number;
    }
  >;

  updateRace(
    _raceID: PromiseOrValue<BigNumberish>,
    _winner: PromiseOrValue<string>,
    _loser: PromiseOrValue<string>,
    _winnerTokenID: PromiseOrValue<BigNumberish>,
    _loserTokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTokenFul(
    _tokenID: PromiseOrValue<BigNumberish>,
    _cost: PromiseOrValue<BigNumberish>,
    _newStats: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTokenReq(
    _tokenID: PromiseOrValue<BigNumberish>,
    _newStats: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawl(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    IDToCar(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        number
      ] & {
        carID: BigNumber;
        name: string;
        desc: string;
        uri: string;
        supply: BigNumber;
        price: BigNumber;
        onMarket: boolean;
        paymentMethod: number;
      }
    >;

    IDToRace(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        raceID: BigNumber;
        name: string;
        desc: string;
        entryFee: BigNumber;
        prize: BigNumber;
        plays: BigNumber;
        active: boolean;
      }
    >;

    IDToToken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number
      ] & {
        owner: string;
        tokenID: BigNumber;
        carID: BigNumber;
        uri: string;
        wins: BigNumber;
        losses: BigNumber;
        price: BigNumber;
        onMarket: boolean;
        paymentMethod: number;
      }
    >;

    IsCaller(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cars(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        number
      ] & {
        carID: BigNumber;
        name: string;
        desc: string;
        uri: string;
        supply: BigNumber;
        price: BigNumber;
        onMarket: boolean;
        paymentMethod: number;
      }
    >;

    claimedFree(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createCar(
      _uri: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _supply: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _paymentMethod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createRace(
      _name: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _entryFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createToken(
      _minter: PromiseOrValue<string>,
      _carID: PromiseOrValue<BigNumberish>,
      _tokenIDs: PromiseOrValue<BigNumberish>[],
      _uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    delistToken(
      _tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getTokenStats(
      _tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    listToken(
      _tokenID: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _paymentMethod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      _carID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchaseToken(
      _tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    racerToken(overrides?: CallOverrides): Promise<string>;

    racerUtils(overrides?: CallOverrides): Promise<string>;

    races(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        raceID: BigNumber;
        name: string;
        desc: string;
        entryFee: BigNumber;
        prize: BigNumber;
        plays: BigNumber;
        active: boolean;
      }
    >;

    setCallers(
      _newCaller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContracts(
      _racerToken: PromiseOrValue<string>,
      _racerUtils: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRaceAccess(
      _raceID: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number
      ] & {
        owner: string;
        tokenID: BigNumber;
        carID: BigNumber;
        uri: string;
        wins: BigNumber;
        losses: BigNumber;
        price: BigNumber;
        onMarket: boolean;
        paymentMethod: number;
      }
    >;

    updateRace(
      _raceID: PromiseOrValue<BigNumberish>,
      _winner: PromiseOrValue<string>,
      _loser: PromiseOrValue<string>,
      _winnerTokenID: PromiseOrValue<BigNumberish>,
      _loserTokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenFul(
      _tokenID: PromiseOrValue<BigNumberish>,
      _cost: PromiseOrValue<BigNumberish>,
      _newStats: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenReq(
      _tokenID: PromiseOrValue<BigNumberish>,
      _newStats: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawl(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CarMinted(uint256,uint256,address,string,uint256[],uint256)"(
      TokenID?: null,
      CarID?: null,
      Owner?: null,
      URI?: null,
      Stats?: null,
      Time?: null
    ): CarMintedEventFilter;
    CarMinted(
      TokenID?: null,
      CarID?: null,
      Owner?: null,
      URI?: null,
      Stats?: null,
      Time?: null
    ): CarMintedEventFilter;

    "RaceCompleted(uint256,address,address,uint256,uint256,uint256,uint256)"(
      RaceID?: null,
      Winner?: null,
      Loser?: null,
      WinnerToken?: null,
      LoserToken?: null,
      Prize?: null,
      Time?: null
    ): RaceCompletedEventFilter;
    RaceCompleted(
      RaceID?: null,
      Winner?: null,
      Loser?: null,
      WinnerToken?: null,
      LoserToken?: null,
      Prize?: null,
      Time?: null
    ): RaceCompletedEventFilter;

    "StatsUpdated(uint256,uint256[],uint256,address,uint256)"(
      TokenID?: null,
      NewStats?: null,
      AmountPayed?: null,
      Updater?: null,
      Time?: null
    ): StatsUpdatedEventFilter;
    StatsUpdated(
      TokenID?: null,
      NewStats?: null,
      AmountPayed?: null,
      Updater?: null,
      Time?: null
    ): StatsUpdatedEventFilter;
  };

  estimateGas: {
    IDToCar(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IDToRace(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IDToToken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IsCaller(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cars(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimedFree(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCar(
      _uri: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _supply: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _paymentMethod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRace(
      _name: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _entryFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createToken(
      _minter: PromiseOrValue<string>,
      _carID: PromiseOrValue<BigNumberish>,
      _tokenIDs: PromiseOrValue<BigNumberish>[],
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delistToken(
      _tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTokenStats(
      _tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listToken(
      _tokenID: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _paymentMethod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      _carID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseToken(
      _tokenID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    racerToken(overrides?: CallOverrides): Promise<BigNumber>;

    racerUtils(overrides?: CallOverrides): Promise<BigNumber>;

    races(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCallers(
      _newCaller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContracts(
      _racerToken: PromiseOrValue<string>,
      _racerUtils: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRaceAccess(
      _raceID: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateRace(
      _raceID: PromiseOrValue<BigNumberish>,
      _winner: PromiseOrValue<string>,
      _loser: PromiseOrValue<string>,
      _winnerTokenID: PromiseOrValue<BigNumberish>,
      _loserTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTokenFul(
      _tokenID: PromiseOrValue<BigNumberish>,
      _cost: PromiseOrValue<BigNumberish>,
      _newStats: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTokenReq(
      _tokenID: PromiseOrValue<BigNumberish>,
      _newStats: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawl(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IDToCar(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IDToRace(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IDToToken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IsCaller(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cars(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimedFree(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCar(
      _uri: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _supply: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _paymentMethod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRace(
      _name: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _entryFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createToken(
      _minter: PromiseOrValue<string>,
      _carID: PromiseOrValue<BigNumberish>,
      _tokenIDs: PromiseOrValue<BigNumberish>[],
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delistToken(
      _tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTokenStats(
      _tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listToken(
      _tokenID: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _paymentMethod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      _carID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseToken(
      _tokenID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    racerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    racerUtils(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    races(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCallers(
      _newCaller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContracts(
      _racerToken: PromiseOrValue<string>,
      _racerUtils: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRaceAccess(
      _raceID: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateRace(
      _raceID: PromiseOrValue<BigNumberish>,
      _winner: PromiseOrValue<string>,
      _loser: PromiseOrValue<string>,
      _winnerTokenID: PromiseOrValue<BigNumberish>,
      _loserTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenFul(
      _tokenID: PromiseOrValue<BigNumberish>,
      _cost: PromiseOrValue<BigNumberish>,
      _newStats: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenReq(
      _tokenID: PromiseOrValue<BigNumberish>,
      _newStats: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawl(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
